(()=>{"use strict";let t,e=localStorage.getItem("myProjectList");e=JSON.parse(e||JSON.stringify([]));class n{constructor(t,e){this.name=t,this.id=e,this.tasks=[]}}function o(){localStorage.setItem("myProjectList",JSON.stringify(e))}function c(t){const n=document.querySelector(".project-lists");n.textContent="",t.forEach((t=>{const o=function(t){const e=document.createElement("button");e.classList.add("button-nav","button-project"),e.innerText=t.name,e.dataset.listId=t.id;const n=document.createElement("i");return n.classList.add("fa-solid","fa-trash-can","trash-btn"),e.appendChild(n),e}(t);n.appendChild(o),o.querySelector(".trash-btn").addEventListener("click",(()=>{const c=e.indexOf(t);e.splice(c,1),n.removeChild(o)}))}))}class a{constructor(t,e,n){this.name=t,this.id=Date.now().toString(),this.priority=e,this.date=n,this.complete=!1}}const s=document.querySelector(".add-task-modal");document.querySelector(".project-form").addEventListener("submit",(function(t){t.preventDefault();const a=document.querySelector(".project-input");if(""===a.value)return void alert("Project name cannot be empty");const s=new n(a.value,Date.now().toString());e.push(s),c(e),console.log(e),a.value=null,o()})),document.querySelector(".navbar").addEventListener("click",(function(e){document.querySelectorAll(".button-nav").forEach((t=>{t.classList.remove("active")})),"button"===e.target.tagName.toLowerCase()&&(e.target.classList.add("active"),t=e.target.dataset.listId),console.log(t)})),c(e),document.querySelector("[data-new-task-form]").addEventListener("submit",(function(){const n=document.querySelector(".task-name"),c=document.querySelector(".task-date"),s=document.querySelector(".task-priority"),r=new a(n.value,c.value,s.value),l=e.find((e=>e.id===t));l?l.tasks.push(r):alert("Please select a project to add your task"),console.log(l),o()})),document.getElementById("new-task").addEventListener("click",(()=>{s.showModal()})),document.querySelector(".close-btn").addEventListener("click",(t=>{t.preventDefault(),s.close()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,