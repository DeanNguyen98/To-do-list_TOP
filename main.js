(()=>{"use strict";class t{constructor(t,e,n,s){this.name=t,this.id=Date.now().toString(),this.priority=n,this.date=e,this.complete=s}}const e=document.querySelector(".add-task-modal");function n(t){const e=document.querySelector(".task-body");e.innerText="",t.tasks.forEach((t=>{const n=function(t){const e=document.createElement("div");e.classList.add("tasks-container");const n=document.createElement("div");n.classList.add("tasks");const s=document.createElement("input");s.type="checkbox",s.id=`task-${t.id}`,s.checked=t.complete,s.addEventListener("change",(()=>{!function(t,e){e.complete=t.checked,a()}(s,t)}));const c=document.createElement("label");c.for=`task-${t.id}`,c.textContent=t.name,n.appendChild(s),n.appendChild(c),e.appendChild(n);const o=document.createElement("div");o.classList.add("tasks-description");const i=document.createElement("div");i.classList.add("descript","date"),i.innerText=t.date.toString();const d=document.createElement("div");switch(d.classList.add("descript","priority"),t.priority){case"high":d.innerText="High",d.classList.add("high");break;case"medium":d.textContent="Medium",d.classList.add("medium");break;case"low":d.textContent="Low",d.classList.add("low")}return d.addEventListener("click",(()=>{!function(t,e){switch(e.priority){case"high":e.priority="medium",t.textContent="Medium",t.classList.remove("high"),t.classList.add("medium");break;case"medium":e.priority="low",t.textContent="Low",t.classList.remove("medium"),t.classList.add("low");break;case"low":e.priority="high",t.textContent="High",t.classList.remove("low"),t.classList.add("high")}a()}(d,t)})),o.appendChild(i),o.appendChild(d),e.appendChild(o),e}(t);e.appendChild(n)})),console.log(t.tasks)}let s,c=localStorage.getItem("myProjectList");c=JSON.parse(c||JSON.stringify([]));class o{constructor(t,e){this.name=t,this.id=e,this.tasks=[]}}function a(){localStorage.setItem("myProjectList",JSON.stringify(c))}function i(t){const e=document.querySelector(".project-lists");e.textContent="",t.forEach((t=>{const n=function(t){const e=document.createElement("button");e.classList.add("button-nav","button-project"),e.innerText=t.name,e.dataset.listId=t.id;const n=document.createElement("i");return n.classList.add("fa-solid","fa-trash-can","trash-btn"),e.appendChild(n),e}(t);e.appendChild(n),n.querySelector(".trash-btn").addEventListener("click",(()=>{const s=c.indexOf(t);c.splice(s,1),e.removeChild(n),a()}))}))}document.querySelector(".project-form").addEventListener("submit",(function(t){t.preventDefault();const e=document.querySelector(".project-input");if(""===e.value)return void alert("Project name cannot be empty");const n=new o(e.value,Date.now().toString());c.push(n),i(c),console.log(c),e.value=null,a()})),document.querySelector(".navbar").addEventListener("click",(function(t){document.querySelectorAll(".button-nav").forEach((t=>{t.classList.remove("active")})),"button"===t.target.tagName.toLowerCase()&&(t.target.classList.add("active"),s=t.target.dataset.listId),console.log(s),n(c.find((t=>t.id===s)))})),i(c),document.querySelector("[data-new-task-form]").addEventListener("submit",(function(){const e=document.querySelector(".task-name"),o=document.querySelector(".task-date"),i=document.querySelector(".task-priority"),d=new t(e.value,o.value,i.value,!1),r=c.find((t=>t.id===s));r?(r.tasks.push(d),n(r)):alert("Please select a project to add your task"),e.value=null,o.value=null,console.log(r),a()})),document.querySelector(".task-del").addEventListener("click",(function(){const t=c.find((t=>t.id===s));t.tasks=t.tasks.filter((t=>!t.complete)),n(t),a()})),document.getElementById("new-task").addEventListener("click",(()=>{e.showModal()})),document.querySelector(".close-btn").addEventListener("click",(t=>{t.preventDefault(),e.close()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,